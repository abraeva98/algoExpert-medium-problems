class MinHeap {
  constructor(array) {
    this.heap = this.buildHeap(array);
  }

  buildHeap(array) {
    let lastParentIdx = Math.floor((array.length - 2) / 2);
		for (let i = lastParentIdx; i >= 0; i --) {
			this.siftDown(i, array.length - 1, array)
		}
		return array;
  }

  siftDown(parentIndex, lastIndex, array) {
		let leftChild = 2 * parentIndex + 1;
		while (leftChild <= lastIndex) {
			let rightChild = 2 * parentIndex + 2;
			let indexToSwap;
		  if (rightChild > lastIndex) rightChild = -1;
			if (rightChild !== -1 && array[rightChild] < array[leftChild]) {
				indexToSwap = rightChild;
			} else {
				indexToSwap = leftChild;
			}
			if (array[indexToSwap] < array[parentIndex]) {
			  this.swap(indexToSwap, parentIndex, array);
			  parentIndex = indexToSwap;
			  leftChild = parentIndex * 2 + 1;
	  	} else {
			  return;
		  }
		}	
  }
	
  swap(child, parent, array) {
			let temp = array[parent];
			array[parent] = array[child];
			array[child] = temp;
	} 
		
  siftUp(currentIndex, heap) {
		let parentIndex = Math.floor((currentIndex - 1) / 2);
		while (currentIndex > 0 && heap[parentIndex] > heap[currentIndex]) {
			this.swap(currentIndex, parentIndex, heap);
			currentIndex = parentIndex;
			parentIndex = Math.floor((currentIndex - 1) / 2);
		}
  }

  peek() {
		return this.heap[0];
  }

  remove() {
		let removedNode = this.peek()
		this.heap[0] = this.heap.pop();
		this.siftDown(0, this.heap.length - 1, this.heap);
		return removedNode;
  }

  insert(value) {
		this.heap.push(value);
		this.siftUp(this.heap.length - 1, this.heap);
  }
}
