
  You're given a two-dimensional array (a matrix) of potentially unequal height
  and width containing only 1s and 0s.
  Each 0 represents a land and each 1 represents part of a river. A river consists 
  of any number of 1s s that are either horizontally or vertically adjacent 
  (but not diagonally adjacent). The number of adjacent 1sforming a river determine its size.
  
  
  Note that a river can twist. In other words, it doesn't have to be a straight
  vertical line or a straight horizontal line; it can be L-shaped, for example.
  
  
  Write a function that returns an array of the sizes of all rivers represented
  in the input matrix. The sizes don't need to be in any particular order.

function riverSizes(matrix) {
	let isVisited = matrix.map(row => row.map(value => false));
	let riverSizes =[];
	for (let i = 0; i < matrix.length; i ++) {
		for (let j = 0; j < matrix[i].length; j ++) {
			  if (matrix[i][j] === 1 && isVisited[i][j] === false) {
					let river = findRiver(isVisited, matrix, i, j)
				  riverSizes.push(river)
				}
		}
	}
	return riverSizes;
}

function findRiver(isVisited, matrix, i, j) {
	let size = 0;
	let array = [[i, j]];
	while (array.length) {
		let currIdx = array.pop();
		let i = currIdx[0];
		let j = currIdx[1];
		if (isVisited[i][j]) continue;
		isVisited[i][j] = true;
		if (matrix[i][j] === 0) continue;
		size ++;
		let neighbors = findNeighbors(isVisited, matrix, i, j);
		for (let neighbor of neighbors) {
			array.push(neighbor)
		}
	}
	return size;
}

function findNeighbors(isVisited, matrix, i, j) {
	let array = [];
	if (i < matrix.length - 1 && !isVisited[i + 1][j]) array.push([i + 1, j])
	if (i > 0 && !isVisited[i - 1][j]) array.push([i - 1, j])
	if (j < matrix[0].length - 1 && !isVisited[i][j + 1]) array.push([i, j + 1])
	if (j > 0 && !isVisited[i][j - 1]) array.push([i, j - 1])
	return array;
}
