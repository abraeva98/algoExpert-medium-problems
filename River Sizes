
  You're given a two-dimensional array (a matrix) of potentially unequal height
  and width containing only 1s and 0s.
  Each 0 represents a land and each 1 represents part of a river. A river consists 
  of any number of 1s s that are either horizontally or vertically adjacent 
  (but not diagonally adjacent). The number of adjacent 1sforming a river determine its size.
  
  
  Note that a river can twist. In other words, it doesn't have to be a straight
  vertical line or a straight horizontal line; it can be L-shaped, for example.
  
  
  Write a function that returns an array of the sizes of all rivers represented
  in the input matrix. The sizes don't need to be in any particular order.

function riverSizes(matrix) {
	let sizes = [];
	let visited = matrix.map(row => row.map(value => false))
	for (let i = 0; i < matrix.length; i ++) {
		for (let j = 0; j < matrix[i].length; j ++) {
			if (visited[i][j]) continue;
			checkNeighbors(i, j, matrix, visited, sizes)
		}
	}
	return sizes
}

function checkNeighbors(i, j, matrix, visited, size) {
	let currentRiverSize = 0;
		let stack = [[i, j]];
		while (stack.length) {
			let currentNode = stack.pop()
			i = currentNode[0]
			j = currentNode[1]
			if (visited[i][j]) continue;
			visited[i][j] = true;
			if (matrix[i][j] === 0) continue;
			currentRiverSize ++
			let unvisited = findAll(i, j, matrix, visited)
			for (let neighbor of unvisited) {
				stack.push(neighbor)
			}
		}
	if (currentRiverSize > 0) {
		size.push(currentRiverSize)
	}
}

function findAll(i, j, matrix, visited) {
	let unvisitedNeighbors = [];
	if (i > 0 && !visited[i - 1][j]) unvisitedNeighbors.push([i - 1, j]);
	if (i < matrix.length - 1 && !visited[i + 1][j]) unvisitedNeighbors.push([i + 1, j]);
	if (j > 0 && !visited[i][j - 1]) unvisitedNeighbors.push([i, j - 1]);
	if (j < matrix[0].length - 1 && !visited[i][j+1]) unvisitedNeighbors.push([i, j + 1]);
	return unvisitedNeighbors;
}
