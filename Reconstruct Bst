
// O(N^2) - time, O(N) - space

class BST {
  constructor(value, left = null, right = null) {
    this.value = value;
    this.left = left;
    this.right = right;
  }
}

function reconstructBst(preOrderTraversalValues) {
	if (preOrderTraversalValues.length === 0) return null;
	
	let value = preOrderTraversalValues[0];
	let rightTree = preOrderTraversalValues.length;
	
	for (let i = 1; i < preOrderTraversalValues.length; i ++) {
		let currentValue = preOrderTraversalValues[i];
		if (value <= currentValue) {
			rightTree = i;
			break;
		}
	}
  let left = reconstructBst(preOrderTraversalValues.slice(1, rightTree));
	let right = reconstructBst(preOrderTraversalValues.slice(rightTree));
  return new BST(value, left, right);
}
